@startuml
skinparam componentStyle uml2

class \Symfony\Component\HttpFoundation\Request {
  +createFromGlobals()
  +getPathInfo()
}

interface HttpKernelInterface {
  +handle(\Symfony\Component\HttpFoundation\Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): \Symfony\Component\HttpFoundation\Response;
}

class Application {
  -\Symfony\Component\Routing\RequestContext requestContext
  -\Symfony\Component\Routing\RouteCollection routeCollection
  -\Monolog\Logger logger
  -\App\Exception\Handler exceptionHandler
  +__construct()
  +loadRoutes()
  +initException\App\Exception\Handler()
  +handle(\Symfony\Component\HttpFoundation\Request)
}

class \App\Exception\Handler {
  -\Monolog\Logger logger
  +init(\Monolog\Logger)
  +handleShutdown()
  +handleException(Throwable)
}

class YamlRouteLoader {
  +load(string): \Symfony\Component\Routing\RouteCollection
}

class ExportController {
  +__invoke(): \Symfony\Component\HttpFoundation\Response
}

class \Symfony\Component\HttpFoundation\Response {
  +send()
}

HttpKernelInterface --> Application
Application --> \Symfony\Component\HttpFoundation\Request : uses
Application --> \App\Exception\Handler : manages
Application --> YamlRouteLoader : uses
Application --> ExportController : routes to
Application --> \Symfony\Component\HttpFoundation\Response : returns
\App\Exception\Handler --> \Symfony\Component\HttpFoundation\Response : creates on error
@enduml